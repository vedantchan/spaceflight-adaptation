%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/vedantchandra/JHM-Research/spaceflight-adaptation/data/trialdata.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/03/04 18:50:14

%% Initialize variables.
filename = '/Users/vedantchandra/JHM-Research/spaceflight-adaptation/data/trialdata.csv';
delimiter = ',';

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7,8,9,10,11]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7,8,9,10,11]);
rawStringColumns = string(raw(:, 1));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
idx = (rawStringColumns(:, 1) == "<undefined>");
rawStringColumns(idx, 1) = "";

%% Create output variable
trialdata = table;
trialdata.Phase = categorical(rawStringColumns(:, 1));
trialdata.Subj1 = cell2mat(rawNumericColumns(:, 1));
trialdata.Subj2 = cell2mat(rawNumericColumns(:, 2));
trialdata.Subj3 = cell2mat(rawNumericColumns(:, 3));
trialdata.Subj4 = cell2mat(rawNumericColumns(:, 4));
trialdata.Subj5 = cell2mat(rawNumericColumns(:, 5));
trialdata.Subj6 = cell2mat(rawNumericColumns(:, 6));
trialdata.Subj7 = cell2mat(rawNumericColumns(:, 7));
trialdata.Subj8 = cell2mat(rawNumericColumns(:, 8));
trialdata.Subj9 = cell2mat(rawNumericColumns(:, 9));
trialdata.Subj10 = cell2mat(rawNumericColumns(:, 10));

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstrresult numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns R idx;

%% Split data by Parameter

vas = [];
van = [];
puzzle = [];
memory=[];
for i = 1:10
   
    subjname = strcat('Subj',num2str(i));
    
    subjectvas = trialdata(3:7,subjname);
    vas = [vas,subjectvas];
    
    subjvan = trialdata(9:13,subjname);
    van = [van,subjvan];
    
    subjpuzzle = trialdata(15:19,subjname);
    puzzle = [puzzle,subjpuzzle];
    
    subjmemory = trialdata(21:25,subjname);
    memory = [memory,subjmemory];
    
end

%% Make plots

makesubplot(van,"VAN");
savefig('plots/epoch/VAN-subplot.fig')

makeoverlayplot(van,"VAN");
savefig('plots/epoch/VAN-overlay.fig')

makesubplot(vas,"VAS");
savefig('plots/epoch/VAS-subplot.fig')
makeoverlayplot(vas,"VAS");
savefig('plots/epoch/VAS-overlay.fig')

makesubplot(puzzle,"Puzzle");
savefig('plots/epoch/Puzzle-subplot.fig')
makeoverlayplot(puzzle,"Puzzle Solve Time");
savefig('plots/epoch/Puzzle-overlay.fig')

makesubplot(memory,"Memory Solve Time");
makeoverlayplot(memory,"Memory Solve Time");


%% Correlation Plot Between Subjects and Measures - VAN
labels={'UP1','UP2','P1','P2','REC'};

figure();
vans = table2array(van);
imagesc(corrcoef(vans));
cbar = colorbar;
colormap('cool');
title("VAN - Inter-Subject Correlation Across Epochs")
xlabel("Subjects")
ylabel("Subjects")
ylabel(cbar,"Correlation Coefficient")
savefig('plots/epoch/VAN-subjectcorr.fig')

hold off

figure()

vans = table2array(van);
imagesc(corrcoef(vans.'));
cbar = colorbar;
colormap('cool')
title("VAN - Inter-Epoch Correlation Across Subjects")
xlabel("Epoch")
ylabel("Epoch")
ylabel(cbar,"Correlation Coefficient")
xticks([1 2 3 4 5]);
xticklabels(labels);
yticks([1 2 3 4 5]);
yticklabels(labels);

savefig('plots/epoch/VAN-epochcorr.fig')

%% Correlation Plot Between Subjects and Measures - VAS
labels={'UP1','UP2','P1','P2','REC'};

figure()
vass = table2array(vas);
imagesc(corrcoef(vass));
cbar = colorbar;
colormap('cool')
title("VAS - Inter-Subject Correlation Across Epochs")
xlabel("Subjects")
ylabel("Subjects")
ylabel(cbar,"Correlation Coefficient")
savefig('plots/epoch/VAS-subjectcorr.fig')

hold off


figure()

imagesc(corrcoef(vass.'));
cbar = colorbar;
colormap('cool')
title("VAS - Inter-Epoch Correlation Across Subjects")
xlabel("Epoch")
ylabel("Epoch")
ylabel(cbar,"Correlation Coefficient")
xticks([1 2 3 4 5]);
xticklabels(labels);
yticks([1 2 3 4 5]);
yticklabels(labels);
savefig('plots/epoch/VAS-epochcorr.fig')

%% Correlation Plot Between Subjects and Measures - Puzzl
labels={'UP1','UP2','P1','P2','REC'};

figure()
puzzles = table2array(puzzle);
imagesc(corrcoef(puzzles))
cbar = colorbar;
colormap('cool')
title("Puzzle Solve Time - Inter-Subject Correlation Across Epochs")
xlabel("Subjects")
ylabel("Subjects")
ylabel(cbar,"Correlation Coefficient")

hold off


figure()

imagesc(corrcoef(puzzles.'))
cbar = colorbar;
colormap('cool')
title("Puzzle Solve Time - Inter-Epoch Correlation Across Subjects")
xlabel("Epoch")
ylabel("Epoch")
ylabel(cbar,"Correlation Coefficient")
xticks([1 2 3 4 5]);
xticklabels(labels);
yticks([1 2 3 4 5]);
yticklabels(labels);
%% plotting functions

function [] = makesubplot(inputtable,title)
hold off
figure('Units','normalized','Position',[0 0 .25 1])
labels={'UP1','UP2','P1','P2','REC'};
%subplots

for i = 1:10
    subplot(10,1,i);
    plot(table2array(inputtable(:,i)));
    xticks([1 2 3 4 5]);
    xticklabels(labels);
    plottitle = strcat('Subject-',num2str(i));
    %title(plottitle);
    
end

sgtitle(title)
end

function [] = makenormplot(inputtable,title)
hold off
figure()

for i = 1:10
    
    subjectmeasure = table2array(inputtable(:,i));
    maxmeasure = max(subjectmeasure);
    minmeasure = min(subjectmeasure);
    
    normvas = (subjectmeasure - minmeasure).*(1/(maxmeasure-minmeasure));
    
    
    plot(normvas,'DisplayName',strcat('Subject-',num2str(i)));
    
    hold on
    
end
legend
labels={'UP1','UP2','P1','P2','REC'};
sgtitle(title)
xticks([1 2 3 4 5]);
xticklabels(labels);


end

function [] = makeoverlayplot(inputtable,title)
hold off
figure();


for i = 1:10
    
    subjectmeasure = table2array(inputtable(:,i));
    
    
    plot(subjectmeasure,'DisplayName',strcat('Subject-',num2str(i)));
    ylabel("Measure")
    xlabel("Epoch")
    
    hold on
    
end
legend
labels={'UP1','UP2','P1','P2','REC'};
sgtitle(title)
xticks([1 2 3 4 5]);
xticklabels(labels);


end